scope Preambles
  use export int.Int
  use export int.Abs
  use export int.EuclideanDivision
  use export list.List
  use export option.Option
  use export map.Map
  use export map.Const

  exception Insufficient_mutez
  exception Terminate

  type nat = int

  type mutez = int

  type address = int

  type key_hash = int

  type timestamp = int

  type contract 'a = int

  type or 'a 'b = Left 'a | Right 'b

  type step = (address, address, address, mutez)

  function mk_step (source : address) (sender : address) (self : address) (amount : mutez) : step =
    (source, sender, self, amount)

  function source (st : step) : address =
    match st with x, _, _, _ -> x end

  function sender (st : step) : address =
    match st with _, x, _, _ -> x end

  function self (st : step) : address =
    match st with _, _, x, _ -> x end

  function amount (st : step) : mutez =
    match st with  _, _, _, x -> x end

  predicate st_wf (st : step) =
    st.amount >= 0

  function sum_of : map string int -> int

  axiom SumE : sum_of (const 0) = 0

  axiom SumI : forall m k v. sum_of m[k <- v] = sum_of m + v - m[k]

  axiom SumN : forall m k. m[k] <= sum_of m

end

scope Unknown

  predicate pre (c : ctx) =
    (sum_of c.vote_storage.Vote.result) * 500 <= c.vote_balance

  predicate post (c : ctx) (c' : ctx) =
    (sum_of c'.vote_storage.Vote.result) * 500 <= c'.vote_balance

  scope Entrypoint

  predicate default unit

  end
end

scope Vote

  type storage = {
    result : map string int;
  }

  let upper_ops = 1

  predicate pre (c : ctx) = inv_pre c

  predicate post (st : step) (gp : gparam) (c : ctx) (c' : ctx) = inv_post c c'

  scope Spec

  predicate vote (st : step) (p : string) (s : storage) (ops : list operation) (s' : storage) =
    500 <= st.amount /\
    s' = { result = s.result[p <- s.result[p] + 1] } /\
    ops = Nil

  end

end
