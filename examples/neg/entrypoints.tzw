scope Unknown

  predicate pre (c : ctx) =
    c.bob_storage = Alice.addr

  predicate post (c : ctx) (c' : ctx) =
    c'.bob_storage = Alice.addr /\
    c'.bob_balance = c.bob_balance

  scope Entrypoint

  predicate default unit

  end

end


scope Alice

  type storage [@gen_wf] = address

  predicate pre (_st : step) (_gp : gparam) (c : ctx) = inv_pre c

  predicate post (_st : step) (_gp : gparam) (c : ctx) (c' : ctx) = inv_post c c'

  let upper_ops = 1

  scope Spec

  predicate default (_st : step) (_p : unit) (s : storage) (ops : list operation) (_s' : storage) =
    (* This transaction seems to call only Carol, but in fact, it may call Bob because the call signature only consists of the entrypoint's name and parameter type. 
    As a result, this example should be unverified since Bob accept a call from Alice as specified in the invariant pre-condition. *)
    (ops = Cons (Xfer (Gp'Carol'default ()) 1 s) Nil)

  end

end

scope Bob

  type storage [@gen_wf] = address

  predicate pre (_st : step) (_gp : gparam) (c : ctx) = inv_pre c

  predicate post (_st : step) (_gp : gparam) (c : ctx) (c' : ctx) = inv_post c c'

  let upper_ops = 0

  scope Spec

  predicate default (st : step) (_p : unit) (s : storage) (ops : list operation) (_s' : storage) =
    (st.sender = s) /\
    ops = Nil

  end

end

scope Carol

  type storage [@gen_wf] = address

  predicate pre (_st : step) (_gp : gparam) (c : ctx) = inv_pre c

  predicate post (_st : step) (_gp : gparam) (c : ctx) (c' : ctx) = inv_post c c'

  let upper_ops = 0

  scope Spec

  predicate default (st : step) (_p : unit) (s : storage) (ops : list operation) (_s' : storage) =
    (st.sender = s) /\
    ops = Nil

  end

end
